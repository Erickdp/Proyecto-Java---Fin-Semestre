/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zoolomania.funcional.vista;

import com.zoolomania.funcional.control.EspecieTrs;
import com.zoolomania.funcional.control.ItinerarioTrs;
import com.zoolomania.funcional.control.MyExcepcion;
import com.zoolomania.funcional.control.UtilGestion;
import com.zoolomania.funcional.control.ZonaTrs;
import com.zoolomania.funcional.modelo.Especie;
import com.zoolomania.funcional.modelo.Itinerario;
import com.zoolomania.funcional.modelo.Zona;
import com.zoolomania.funcional.vista.frmMenuPrincipal;
import com.zoolomania.funcional.vista.frmMenuPrincipal;
import java.time.LocalTime;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Erick Díaz
 */
public class frmZona extends javax.swing.JFrame {

    ZonaTrs ztrs = new ZonaTrs();
    EspecieTrs etrs = new EspecieTrs();
    ItinerarioTrs itrs = new ItinerarioTrs();
    List<Zona> zonas = ztrs.listar();
    List<Especie> especies = etrs.listar();
    List<Itinerario> itinerarios = itrs.listar();
    boolean bandera = false;

    private void cargarTablaZ() {
        Object[] columna = {"ID", "Nombre", "Extensión (Km)"};
        DefaultTableModel modeloZ = new DefaultTableModel(columna, 0);
        for (Zona z : zonas) {
            short id = z.getId();
            String nombre = z.getNombreZona();
            Float extension = z.getExtension();
            Object[] fila = {id, nombre, extension};
            modeloZ.addRow(fila);
        }
        this.tablaZ.setModel(modeloZ);
    }

    private void cargarTablaE() {
        Object[] columna = {"Marca", "Especie", "Nombre Científico", "Descripción"};
        DefaultTableModel modeloE = new DefaultTableModel(columna, 0);
        for (Especie e : especies) {
            short marca = e.getMarca();
            String especie = e.getNombreEspecie();
            String nombreC = e.getNombreCientifico();
            String descripcion = e.getDescripcion();
            Object[] fila = {marca, especie, nombreC, descripcion};
            modeloE.addRow(fila);
        }
        this.tablaE.setModel(modeloE);
    }

    private void cargarTablaI() {
        Object[] columna = {"ID", "Codigo", "N° Max. Personas", "Duración (min)", "Longitud (km)"};
        DefaultTableModel modeloI = new DefaultTableModel(columna, 0);
        for (Itinerario i : itinerarios) {
            short id = i.getId();
            String codigo = i.getCodigo();
            byte nPersonas = i.getNumMaxVisitantes();
            LocalTime duracion = i.getDuracionRecorrido();
            float longitud = i.getLongitud();
            Object[] fila = {id, codigo, nPersonas, duracion, longitud};
            modeloI.addRow(fila);
        }
        this.tablaI.setModel(modeloI);
    }

    /**
     * Creates new form frmZona
     */
    public frmZona() {
        initComponents();
         rsscalelabel.RSScaleLabel.setScaleLabel(jLabel4, "src/iconos/logo.jpg");
        setLocationRelativeTo(null);
        cargarTablaZ();
        cargarTablaI();
        cargarTablaE();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        bOrdenarO = new javax.swing.JButton();
        bEliminarO = new javax.swing.JButton();
        rAscendenteO = new javax.swing.JRadioButton();
        rDescendenteO = new javax.swing.JRadioButton();
        cBoxO = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        bAgregarO = new javax.swing.JButton();
        tablaPanel = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaI = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaE = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaZ = new javax.swing.JTable();
        cBox = new javax.swing.JComboBox<>();
        rDescendente = new javax.swing.JRadioButton();
        rAscendente = new javax.swing.JRadioButton();
        bOrdenar = new javax.swing.JButton();
        bActualizar = new javax.swing.JButton();
        bAgregar = new javax.swing.JButton();
        bEliminar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jExtension = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jNombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));

        jButton1.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jButton1.setText("Menu/Principal");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        bOrdenarO.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bOrdenarO.setText("Ordenar");
        bOrdenarO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOrdenarOActionPerformed(evt);
            }
        });

        bEliminarO.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bEliminarO.setText("Eliminar");
        bEliminarO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEliminarOActionPerformed(evt);
            }
        });

        buttonGroup2.add(rAscendenteO);
        rAscendenteO.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        rAscendenteO.setSelected(true);
        rAscendenteO.setText("Ascendente");

        buttonGroup2.add(rDescendenteO);
        rDescendenteO.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        rDescendenteO.setText("Descendente");

        cBoxO.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        cBoxO.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "Id" }));

        jButton3.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jButton3.setText("Ver Todo");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        bAgregarO.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bAgregarO.setText("Agregar");
        bAgregarO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarOActionPerformed(evt);
            }
        });

        tablaPanel.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N

        tablaI.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tablaI);

        tablaPanel.addTab("Itinerarios", jScrollPane3);

        tablaE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tablaE);

        tablaPanel.addTab("Especies", jScrollPane2);

        tablaZ.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaZ);

        cBox.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        cBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "Id" }));

        buttonGroup1.add(rDescendente);
        rDescendente.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        rDescendente.setText("Descendente");

        buttonGroup1.add(rAscendente);
        rAscendente.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        rAscendente.setSelected(true);
        rAscendente.setText("Ascendente");
        rAscendente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rAscendenteActionPerformed(evt);
            }
        });

        bOrdenar.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bOrdenar.setText("Ordenar");
        bOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOrdenarActionPerformed(evt);
            }
        });

        bActualizar.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bActualizar.setText("Actualizar");
        bActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bActualizarActionPerformed(evt);
            }
        });

        bAgregar.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bAgregar.setText("Agregar");
        bAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarActionPerformed(evt);
            }
        });

        bEliminar.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bEliminar.setText("Eliminar");
        bEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEliminarActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jButton2.setText("Ver Relaciones/Itinerarios/Especies");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jExtension.setBackground(new java.awt.Color(0, 102, 153));
        jExtension.setForeground(new java.awt.Color(255, 255, 255));
        jExtension.setBorder(null);
        jExtension.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExtensionActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jLabel3.setText("Extensión:");

        jNombre.setBackground(new java.awt.Color(0, 102, 153));
        jNombre.setForeground(new java.awt.Color(255, 255, 255));
        jNombre.setBorder(null);
        jNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNombreActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jLabel2.setText("Nombre Zona:");

        jID.setBackground(new java.awt.Color(0, 102, 153));
        jID.setForeground(new java.awt.Color(255, 255, 255));
        jID.setBorder(null);

        jLabel1.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jLabel1.setText("ID:");

        jLabel4.setText("jLabel4");

        jSeparator3.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(rAscendente)
                                .addGap(18, 18, 18)
                                .addComponent(rDescendente)
                                .addGap(18, 18, 18)
                                .addComponent(cBox, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tablaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jID, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jNombre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(61, 61, 61)
                                .addComponent(bAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jExtension, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                                    .addComponent(jSeparator3))
                                .addGap(28, 28, 28)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(cBoxO, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)))
                .addGap(0, 12, Short.MAX_VALUE)
                .addComponent(rDescendenteO)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rAscendenteO)
                .addGap(26, 26, 26)
                .addComponent(bOrdenarO, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bEliminarO, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bAgregarO, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(bEliminar)
                                        .addComponent(bAgregar))
                                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jExtension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cBoxO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rDescendenteO)
                            .addComponent(rAscendenteO)
                            .addComponent(bOrdenarO))
                        .addGap(36, 36, 36)
                        .addComponent(bActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(bOrdenar)
                                .addComponent(rAscendente))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rDescendente)
                                .addComponent(cBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(152, 152, 152)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton3)
                                    .addComponent(bAgregarO)
                                    .addComponent(bEliminarO)))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(140, 140, 140)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton2))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tablaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 3, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jNombreActionPerformed

    private void jExtensionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExtensionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jExtensionActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new frmMenuPrincipal().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void bAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarActionPerformed
        // TODO add your handling code here:
        if (!(jNombre.getText().isEmpty() | jExtension.getText().isEmpty()
                | jID.getText().isEmpty())) {
            try {
                System.out.println(ztrs.guardar(new Zona(jNombre.getText(), Float.parseFloat(jExtension.getText()),
                        Short.parseShort(jID.getText()))));
                jNombre.setText("");
                jExtension.setText("");
            } catch (MyExcepcion ex) {
                Logger.getLogger(frmZona.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                jID.setText("");
                cargarTablaZ();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de llenar todos los campos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bAgregarActionPerformed

    /**
     * Lo que hace la implementación de este método es que si se elimina la Zona
     * entonces esta debe de eliminarse en todas las demás relaciones que puedan
     * existir hacia este objeto, se elimina el registro completo.
     *
     * @param evt
     */
    private void bEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminarActionPerformed
        // TODO add your handling code here:
        if (tablaZ.getSelectedRow() > -1) {
            try {
                UtilGestion.eliminacionCompleta(zonas.get(tablaZ.getSelectedRow()));
                System.out.println(ztrs.eliminar(zonas.get(tablaZ.getSelectedRow())));
            } catch (MyExcepcion ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error al Eliminar", JOptionPane.ERROR_MESSAGE);
            } finally {
                especies = etrs.listar();
                itinerarios = itrs.listar();
                cargarTablaZ();
                cargarTablaE();
                cargarTablaI();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una fila para eliminar", "Error al eliminar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bEliminarActionPerformed

    private void bActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bActualizarActionPerformed
        // TODO add your handling code here:
        if (tablaZ.getSelectedRow() > -1 & !(jNombre.getText().isEmpty() | jExtension.getText().isEmpty()
                | jID.getText().isEmpty())) {
            JOptionPane.showMessageDialog(null, "El ID de la zona no puede actualizarse.",
                    "Aviso", JOptionPane.INFORMATION_MESSAGE);
            try {
                System.out.println(ztrs.actulizar(new Zona(jNombre.getText(), Float.parseFloat(jExtension.getText()),
                        zonas.get(tablaZ.getSelectedRow()).getId())));
            } catch (MyExcepcion ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error al Actualizar", JOptionPane.ERROR_MESSAGE);
            } finally {
                jNombre.setText("");
                jExtension.setText("");
                jID.setText("");
                cargarTablaZ();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de elejir una fila o completar todos los campos", "Error al actualizar",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bActualizarActionPerformed

    private void bOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOrdenarActionPerformed
        // TODO add your handling code here:
        if (cBox.getSelectedIndex() == 0) {
            Zona.bandera = false;
            if (rAscendente.isSelected()) {
                Collections.sort(zonas);
            } else if (rDescendente.isSelected()) {
                Collections.sort(zonas, Collections.reverseOrder());
            }
        } else if (cBox.getSelectedIndex() == 1) {
            Zona.bandera = true;
            if (rAscendente.isSelected()) {
                Collections.sort(zonas, Collections.reverseOrder());
            } else if (rDescendente.isSelected()) {
                Collections.sort(zonas);
            }
        }
        cargarTablaZ();
    }//GEN-LAST:event_bOrdenarActionPerformed

    private void bOrdenarOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOrdenarOActionPerformed
        // TODO add your handling code here:
        if (cBoxO.getSelectedIndex() == 0) {
            Especie.bandera = false;
            Itinerario.bandera = false;
            if (rAscendenteO.isSelected()) {
                Collections.sort(especies);
                Collections.sort(itinerarios);
            } else if (rDescendenteO.isSelected()) {
                Collections.sort(especies, Collections.reverseOrder());
                Collections.sort(itinerarios, Collections.reverseOrder());
            }
        } else if (cBoxO.getSelectedIndex() == 1) {
            Especie.bandera = true;
            Itinerario.bandera = true;
            if (rAscendenteO.isSelected()) {
                Collections.sort(especies);
                Collections.sort(itinerarios);
            } else if (rDescendenteO.isSelected()) {
                Collections.sort(especies, Collections.reverseOrder());
                Collections.sort(itinerarios, Collections.reverseOrder());
            }
        }
        cargarTablaE();
        cargarTablaI();
    }//GEN-LAST:event_bOrdenarOActionPerformed

    private void bAgregarOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarOActionPerformed
        // TODO add your handling code here:
        if (tablaZ.getSelectedRow() > -1 & tablaE.getSelectedRow() > -1 & !bandera) {
            Zona zona = zonas.get(tablaZ.getSelectedRow());
            Especie especie = especies.get(tablaE.getSelectedRow());
            if (!zona.getEspecies().contains(especie)) {
                zona.agregarEspecie(especie);
                especie.agregarZona(zona);
                try {
                    System.out.println(ztrs.actulizar(zona));
                    System.out.println(etrs.actulizar(especie));
                    JOptionPane.showMessageDialog(null, "Agregada especie a la Zona: " + especie.getNombreEspecie(),
                            "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (MyExcepcion ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "La especie que intenta agregar ya está en la Zona", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (tablaZ.getSelectedRow() > -1 & tablaI.getSelectedRow() > -1 & !bandera) {
            Zona zona = zonas.get(tablaZ.getSelectedRow());
            Itinerario itinerario = itinerarios.get(tablaI.getSelectedRow());
            if (!zona.getItinerarios().contains(itinerario)) {
                zona.agregarItinerario(itinerario);
                itinerario.agregarZona(zona);
                try {
                    System.out.println(ztrs.actulizar(zona));
                    System.out.println(itrs.actulizar(itinerario));
                    JOptionPane.showMessageDialog(null, "Itinerario agregado a la Zona: " + zona.getNombreZona(),
                            "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (MyExcepcion ex) {
                    Logger.getLogger(frmZona.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "El itinerario ya corresponde a la Zona", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "(Seleccionar Fila) "
                    + "Solo puede agregar especies desde la lista completa, pues estas ya están agregadas.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bAgregarOActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (tablaZ.getSelectedRow() > -1) {
            especies = zonas.get(tablaZ.getSelectedRow()).getEspecies();
            itinerarios = zonas.get(tablaZ.getSelectedRow()).getItinerarios();
            cargarTablaI();
            cargarTablaE();
            bandera = true;
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una fila para obsevar las relaciones", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void bEliminarOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminarOActionPerformed
        // TODO add your handling code here:
        if (tablaZ.getSelectedRow() > -1 & tablaE.getSelectedRow() > -1 & bandera) {
            Zona zona = zonas.get(tablaZ.getSelectedRow());
            Especie especie = especies.get(tablaE.getSelectedRow());
            if (zona.getEspecies().contains(especie)) {
                zona.eliminarEspecie(especie);
                especie.eliminarZona(zona);
                try {
                    System.out.println(ztrs.actulizar(zona));
                    System.out.println(etrs.actulizar(especie));
                    JOptionPane.showMessageDialog(null, especie.getNombreEspecie()
                            + " eliminado de la Zona.", "Aviso", JOptionPane.ERROR_MESSAGE);
                } catch (MyExcepcion ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                    especies = zona.getEspecies();
                    cargarTablaZ(); //Se carga la tabla para que disminuya el número de especies que habitan allí
                    cargarTablaE();
                }
            } else {
                JOptionPane.showMessageDialog(null, "La especie no está relacionada con la zona", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (tablaZ.getSelectedRow() > -1 & tablaI.getSelectedRow() > -1 & bandera) {
            Zona zona = zonas.get(tablaZ.getSelectedRow());
            Itinerario itinerario = itinerarios.get(tablaI.getSelectedRow());
            if (zona.getItinerarios().contains(itinerario)) {
                zona.eliminarItinerario(itinerario);
                itinerario.eliminarZona(zona);
                try {
                    System.out.println(ztrs.actulizar(zona));
                    System.out.println(itrs.actulizar(itinerario));
                } catch (MyExcepcion ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                    itinerarios = zona.getItinerarios();
                    cargarTablaI();
                }
            } else {
                JOptionPane.showMessageDialog(null, "El Itinerario no está relacionada con la zona", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar la fila a eliminar y solo desde la tabla asociada",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bEliminarOActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         bandera = false;
        /*
        No olvidar devolver a la lista su valores no relacionados al objeto
         */
        especies = etrs.listar();
        itinerarios = itrs.listar();
        cargarTablaE();
        cargarTablaI();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void rAscendenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rAscendenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rAscendenteActionPerformed

    private boolean validarCampos() {
        if (jNombre.getText().isEmpty() | jExtension.getText().isEmpty()
                | jID.getText().isEmpty()) {
            return true;
        }
        return false;
    }

    public static boolean buscarItinerario(Zona zona, Itinerario itinerario) {
        List<Itinerario> itinerarios = zona.getItinerarios();
        for (Itinerario i : itinerarios) {
            if (i.equals(itinerario)) {
                return true;
            }
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmZona.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmZona.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmZona.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmZona.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmZona().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bActualizar;
    private javax.swing.JButton bAgregar;
    private javax.swing.JButton bAgregarO;
    private javax.swing.JButton bEliminar;
    private javax.swing.JButton bEliminarO;
    private javax.swing.JButton bOrdenar;
    private javax.swing.JButton bOrdenarO;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> cBox;
    private javax.swing.JComboBox<String> cBoxO;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JTextField jExtension;
    private javax.swing.JTextField jID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jNombre;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JRadioButton rAscendente;
    private javax.swing.JRadioButton rAscendenteO;
    private javax.swing.JRadioButton rDescendente;
    private javax.swing.JRadioButton rDescendenteO;
    private javax.swing.JTable tablaE;
    private javax.swing.JTable tablaI;
    private javax.swing.JTabbedPane tablaPanel;
    private javax.swing.JTable tablaZ;
    // End of variables declaration//GEN-END:variables
}
