/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zoolomania.funcional.vista;

import com.zoolomania.funcional.control.EspecieTrs;
import com.zoolomania.funcional.control.ItinerarioTrs;
import com.zoolomania.funcional.control.MyExcepcion;
import com.zoolomania.funcional.control.UtilGestion;
import com.zoolomania.funcional.control.ZonaTrs;
import com.zoolomania.funcional.modelo.Especie;
import com.zoolomania.funcional.modelo.Itinerario;
import com.zoolomania.funcional.modelo.Zona;
import java.time.LocalTime;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Erick Díaz
 */
public class frmZona extends javax.swing.JFrame {

    ZonaTrs ztrs = new ZonaTrs();
    EspecieTrs etrs = new EspecieTrs();
    ItinerarioTrs itrs = new ItinerarioTrs();
    List<Zona> zonas = ztrs.listar();
    List<Especie> especies = etrs.listar();
    List<Itinerario> itinerarios = itrs.listar();
    boolean bandera = false;

    private void cargarTablaZ() {
        Object[] columna = {"ID", "Nombre", "Extensión (Km)"};
        DefaultTableModel modeloZ = new DefaultTableModel(columna, 0);
        for (Zona z : zonas) {
            short id = z.getId();
            String nombre = z.getNombreZona();
            Float extension = z.getExtension();
            Object[] fila = {id, nombre, extension};
            modeloZ.addRow(fila);
        }
        this.tablaZ.setModel(modeloZ);
    }

    private void cargarTablaE() {
        Object[] columna = {"Marca", "Especie", "Nombre Científico", "Descripción"};
        DefaultTableModel modeloE = new DefaultTableModel(columna, 0);
        for (Especie e : especies) {
            short marca = e.getMarca();
            String especie = e.getNombreEspecie();
            String nombreC = e.getNombreCientifico();
            String descripcion = e.getDescripcion();
            Object[] fila = {marca, especie, nombreC, descripcion};
            modeloE.addRow(fila);
        }
        this.tablaE.setModel(modeloE);
    }

    private void cargarTablaI() {
        Object[] columna = {"ID", "Codigo", "N° Max. Personas", "Duración (min)", "Longitud (km)"};
        DefaultTableModel modeloI = new DefaultTableModel(columna, 0);
        for (Itinerario i : itinerarios) {
            short id = i.getId();
            String codigo = i.getCodigo();
            byte nPersonas = i.getNumMaxVisitantes();
            LocalTime duracion = i.getDuracionRecorrido();
            float longitud = i.getLongitud();
            Object[] fila = {id, codigo, nPersonas, duracion, longitud};
            modeloI.addRow(fila);
        }
        this.tablaI.setModel(modeloI);
    }

    /**
     * Creates new form frmZona
     */
    public frmZona() {
        initComponents();
        setLocationRelativeTo(null);
        cargarTablaZ();
        cargarTablaI();
        cargarTablaE();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        bAgregar = new javax.swing.JButton();
        jID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jNombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jExtension = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaZ = new javax.swing.JTable();
        bEliminar = new javax.swing.JButton();
        bActualizar = new javax.swing.JButton();
        bOrdenar = new javax.swing.JButton();
        rAscendente = new javax.swing.JRadioButton();
        rDescendente = new javax.swing.JRadioButton();
        cBox = new javax.swing.JComboBox<>();
        tablaPanel = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaE = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaI = new javax.swing.JTable();
        bAgregarO = new javax.swing.JButton();
        bEliminarO = new javax.swing.JButton();
        bOrdenarO = new javax.swing.JButton();
        rAscendenteO = new javax.swing.JRadioButton();
        rDescendenteO = new javax.swing.JRadioButton();
        cBoxO = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jLabel1.setText("ID");

        bAgregar.setText("Agregar");
        bAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre Zona");

        jNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNombreActionPerformed(evt);
            }
        });

        jLabel3.setText("Extensión");

        jExtension.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExtensionActionPerformed(evt);
            }
        });

        tablaZ.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaZ);

        bEliminar.setText("Eliminar");
        bEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEliminarActionPerformed(evt);
            }
        });

        bActualizar.setText("Actualizar");
        bActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bActualizarActionPerformed(evt);
            }
        });

        bOrdenar.setText("Ordenar");
        bOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOrdenarActionPerformed(evt);
            }
        });

        buttonGroup1.add(rAscendente);
        rAscendente.setSelected(true);
        rAscendente.setText("Ascendente");
        rAscendente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rAscendenteActionPerformed(evt);
            }
        });

        buttonGroup1.add(rDescendente);
        rDescendente.setText("Descendente");

        cBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "Id" }));

        tablaE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tablaE);

        tablaPanel.addTab("Especies", jScrollPane2);

        tablaI.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tablaI);

        tablaPanel.addTab("Itinerarios", jScrollPane3);

        bAgregarO.setText("Agregar");
        bAgregarO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarOActionPerformed(evt);
            }
        });

        bEliminarO.setText("Eliminar");
        bEliminarO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEliminarOActionPerformed(evt);
            }
        });

        bOrdenarO.setText("Ordenar");
        bOrdenarO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOrdenarOActionPerformed(evt);
            }
        });

        buttonGroup2.add(rAscendenteO);
        rAscendenteO.setSelected(true);
        rAscendenteO.setText("Ascendente");

        buttonGroup2.add(rDescendenteO);
        rDescendenteO.setText("Descendente");

        cBoxO.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "Id" }));

        jButton1.setText("Regresar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Ver Relacion");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Ver Todo");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jID, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(bActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(rAscendente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rDescendente))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jExtension, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(89, 89, 89)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cBox, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 74, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bEliminarO, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bOrdenarO, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cBoxO, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rAscendenteO)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(rDescendenteO))))
                            .addComponent(tablaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bAgregarO, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addGap(15, 15, 15))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(76, 76, 76))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jExtension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bActualizar)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bOrdenar)
                    .addComponent(rAscendente)
                    .addComponent(rDescendente)
                    .addComponent(cBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bAgregarO)
                            .addComponent(cBoxO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bEliminarO)
                    .addComponent(bOrdenarO)
                    .addComponent(rAscendenteO)
                    .addComponent(rDescendenteO)
                    .addComponent(bEliminar)
                    .addComponent(bAgregar))
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(tablaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jNombreActionPerformed

    private void jExtensionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExtensionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jExtensionActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new frmMenuPrincipal().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void bAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarActionPerformed
        // TODO add your handling code here:
        if (!validarCampos()) {
            try {
                System.out.println(ztrs.guardar(new Zona(jNombre.getText(), Float.parseFloat(jExtension.getText()),
                        Short.parseShort(jID.getText()))));
                jNombre.setText("");
                jExtension.setText("");
            } catch (MyExcepcion ex) {
                Logger.getLogger(frmZona.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                jID.setText("");
                cargarTablaZ();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de llenar todos los campos", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bAgregarActionPerformed

    /**
     * Lo que hace la implementación de este método es que si se elimina la Zona
     * entonces esta debe de eliminarse en todas las demás relaciones que puedan
     * existir hacia este objeto, se elimina el registro completo.
     *
     * @param evt
     */
    private void bEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminarActionPerformed
        // TODO add your handling code here:
        if (tablaZ.getSelectedRow() > -1) {
            try {
                UtilGestion.eliminacionCompleta(zonas.get(tablaZ.getSelectedRow()));
                System.out.println(ztrs.eliminar(zonas.get(tablaZ.getSelectedRow())));
            } catch (MyExcepcion ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error al Eliminar", JOptionPane.ERROR_MESSAGE);
            } finally {
                especies = etrs.listar();
                itinerarios = itrs.listar();
                cargarTablaZ();
                cargarTablaE();
                cargarTablaI();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una fila para eliminar", "Error al eliminar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bEliminarActionPerformed

    private void bActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bActualizarActionPerformed
        // TODO add your handling code here:
        if (tablaZ.getSelectedRow() > -1 & !validarCampos()) {
            JOptionPane.showMessageDialog(null, "El ID de la zona no puede actualizarse.",
                    "Aviso", JOptionPane.INFORMATION_MESSAGE);
            try {
                System.out.println(ztrs.actulizar(new Zona(jNombre.getText(), Float.parseFloat(jExtension.getText()),
                        zonas.get(tablaZ.getSelectedRow()).getId())));
            } catch (MyExcepcion ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error al Actualizar", JOptionPane.ERROR_MESSAGE);
            } finally {
                jNombre.setText("");
                jExtension.setText("");
                jID.setText("");
                cargarTablaZ();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de elejir una fila o completar todos los campos", "Error al actualizar",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bActualizarActionPerformed

    private void bOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOrdenarActionPerformed
        // TODO add your handling code here:
        if (cBox.getSelectedIndex() == 0) {
            Zona.bandera = false;
            if (rAscendente.isSelected()) {
                Collections.sort(zonas);
            } else if (rDescendente.isSelected()) {
                Collections.sort(zonas, Collections.reverseOrder());
            }
        } else if (cBox.getSelectedIndex() == 1) {
            Zona.bandera = true;
            if (rAscendente.isSelected()) {
                Collections.sort(zonas, Collections.reverseOrder());
            } else if (rDescendente.isSelected()) {
                Collections.sort(zonas);
            }
        }
        cargarTablaZ();
    }//GEN-LAST:event_bOrdenarActionPerformed

    private void bOrdenarOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOrdenarOActionPerformed
        // TODO add your handling code here:
        if (cBoxO.getSelectedIndex() == 0) {
            Especie.bandera = false;
            Itinerario.bandera = false;
            if (rAscendenteO.isSelected()) {
                Collections.sort(especies);
                Collections.sort(itinerarios);
            } else if (rDescendenteO.isSelected()) {
                Collections.sort(especies, Collections.reverseOrder());
                Collections.sort(itinerarios, Collections.reverseOrder());
            }
        } else if (cBoxO.getSelectedIndex() == 1) {
            Especie.bandera = true;
            Itinerario.bandera = true;
            if (rAscendenteO.isSelected()) {
                Collections.sort(especies);
                Collections.sort(itinerarios);
            } else if (rDescendenteO.isSelected()) {
                Collections.sort(especies, Collections.reverseOrder());
                Collections.sort(itinerarios, Collections.reverseOrder());
            }
        }
        cargarTablaE();
        cargarTablaI();
    }//GEN-LAST:event_bOrdenarOActionPerformed

    private void bAgregarOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarOActionPerformed
        // TODO add your handling code here:
        if (tablaZ.getSelectedRow() > -1 & tablaE.getSelectedRow() > -1 & !bandera) {
            Zona zona = zonas.get(tablaZ.getSelectedRow());
            Especie especie = especies.get(tablaE.getSelectedRow());
            if (!frmEspecie.buscarObjeto((byte) 3, especie, zona)) {
                zona.agregarEspecie(especie);
                especie.agregarZona(zona);
                try {
                    System.out.println(ztrs.actulizar(zona));
                    System.out.println(etrs.actulizar(especie));
                    JOptionPane.showMessageDialog(null, "Agregada especie a la Zona: " + especie.getNombreEspecie(),
                            "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (MyExcepcion ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "La especie que intenta agregar ya está en la Zona", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (tablaZ.getSelectedRow() > -1 & tablaI.getSelectedRow() > -1 & !bandera) {
            Zona zona = zonas.get(tablaZ.getSelectedRow());
            Itinerario itinerario = itinerarios.get(tablaI.getSelectedRow());
            if (!buscarItinerario(zona, itinerario)) {
                zona.agregarItinerario(itinerario);
                itinerario.agregarZona(zona);
                try {
                    System.out.println(ztrs.actulizar(zona));
                    System.out.println(itrs.actulizar(itinerario));
                    JOptionPane.showMessageDialog(null, "Itinerario agregado a la Zona: " + zona.getNombreZona(),
                            "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (MyExcepcion ex) {
                    Logger.getLogger(frmZona.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "El itinerario ya corresponde a la Zona", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "(Seleccionar Fila) "
                    + "Solo puede agregar especies desde la lista completa, pues estas ya están agregadas.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bAgregarOActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (tablaZ.getSelectedRow() > -1) {
            especies = zonas.get(tablaZ.getSelectedRow()).getEspecies();
            itinerarios = zonas.get(tablaZ.getSelectedRow()).getItinerarios();
            cargarTablaI();
            cargarTablaE();
            bandera = true;
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una fila para obsevar las relaciones", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void bEliminarOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminarOActionPerformed
        // TODO add your handling code here:
        if (tablaZ.getSelectedRow() > -1 & tablaE.getSelectedRow() > -1 & bandera) {
            Zona zona = zonas.get(tablaZ.getSelectedRow());
            Especie especie = especies.get(tablaE.getSelectedRow());
            if (frmEspecie.buscarObjeto((byte) 3, especie, zona)) {
                zona.eliminarEspecie(especie);
                especie.eliminarZona(zona);
                try {
                    System.out.println(ztrs.actulizar(zona));
                    System.out.println(etrs.actulizar(especie));
                    JOptionPane.showMessageDialog(null, especie.getNombreEspecie()
                            + " eliminado de la Zona.", "Aviso", JOptionPane.ERROR_MESSAGE);
                } catch (MyExcepcion ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                    especies = zona.getEspecies();
                    cargarTablaZ(); //Se carga la tabla para que disminuya el número de especies que habitan allí
                    cargarTablaE();
                }
            } else {
                JOptionPane.showMessageDialog(null, "La especie no está relacionada con la zona", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (tablaZ.getSelectedRow() > -1 & tablaI.getSelectedRow() > -1 & bandera) {
            Zona zona = zonas.get(tablaZ.getSelectedRow());
            Itinerario itinerario = itinerarios.get(tablaI.getSelectedRow());
            zona.eliminarItinerario(itinerario);
            itinerario.eliminarZona(zona);
            try {
                System.out.println(ztrs.actulizar(zona));
                System.out.println(itrs.actulizar(itinerario));
            } catch (MyExcepcion ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                itinerarios = zona.getItinerarios();
                cargarTablaI();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar la fila a eliminar y solo desde la tabla asociada",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bEliminarOActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        bandera = false;
        /*
        No olvidar devolver a la lista su valores no relacionados al objeto
         */
        especies = etrs.listar();
        itinerarios = itrs.listar();
        cargarTablaE();
        cargarTablaI();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void rAscendenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rAscendenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rAscendenteActionPerformed

    private boolean validarCampos() {
        if (jNombre.getText().isEmpty() | jExtension.getText().isEmpty()
                | jID.getText().isEmpty()) {
            return true;
        }
        return false;
    }

    public static boolean buscarItinerario(Zona zona, Itinerario itinerario) {
        List<Itinerario> itinerarios = zona.getItinerarios();
        for (Itinerario i : itinerarios) {
            if (i.equals(itinerario)) {
                return true;
            }
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmZona.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmZona.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmZona.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmZona.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmZona().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bActualizar;
    private javax.swing.JButton bAgregar;
    private javax.swing.JButton bAgregarO;
    private javax.swing.JButton bEliminar;
    private javax.swing.JButton bEliminarO;
    private javax.swing.JButton bOrdenar;
    private javax.swing.JButton bOrdenarO;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> cBox;
    private javax.swing.JComboBox<String> cBoxO;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JTextField jExtension;
    private javax.swing.JTextField jID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jNombre;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JRadioButton rAscendente;
    private javax.swing.JRadioButton rAscendenteO;
    private javax.swing.JRadioButton rDescendente;
    private javax.swing.JRadioButton rDescendenteO;
    private javax.swing.JTable tablaE;
    private javax.swing.JTable tablaI;
    private javax.swing.JTabbedPane tablaPanel;
    private javax.swing.JTable tablaZ;
    // End of variables declaration//GEN-END:variables
}
