/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zoolomania.funcional.vista;

import com.zoolomania.funcional.control.CuidadorTrs;
import com.zoolomania.funcional.control.EspecieTrs;
import com.zoolomania.funcional.control.HabitatTrs;
import com.zoolomania.funcional.control.MyExcepcion;
import com.zoolomania.funcional.control.UtilGestion;
import com.zoolomania.funcional.control.ZonaTrs;
import com.zoolomania.funcional.modelo.Cuidador;
import com.zoolomania.funcional.modelo.Especie;
import com.zoolomania.funcional.modelo.Habitat;
import com.zoolomania.funcional.modelo.Zona;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Clase que permitirá simular el formulario para realizar operaciones
 * de negocio con Especie
 * @author Erick Díaz
 */
public class frmEspecie extends javax.swing.JFrame {

    EspecieTrs etrs = new EspecieTrs();
    CuidadorTrs ctrs = new CuidadorTrs();
    HabitatTrs htrs = new HabitatTrs();
    ZonaTrs ztrs = new ZonaTrs();
    /*
    Es recomendable obtener la lista de las clases que administran 
    cada clase que declararlas dentro de los métodos, pues producen 
    excepciones debido a que no se actualizan
     */
    List<Especie> especies = etrs.listar();
    List<Cuidador> cuidadores = ctrs.listar();
    List<Habitat> habitats = htrs.listar();
    List<Zona> zonas = ztrs.listar();
    boolean bandera = false;

    public void cargarTablaE() {
        //Falta agregar la fecha en la que el cuidador empezó a cuidar a la especie
        Object[] columna = {"Marca", "Especie", "Nombre Científico", "Descripción"};
        DefaultTableModel modeloE = new DefaultTableModel(columna, 0);
        for (Especie e : especies) {
            short marca = e.getMarca();
            String especie = e.getNombreEspecie();
            String nombreC = e.getNombreCientifico();
            String descripcion = e.getDescripcion();
            Object[] fila = {marca, especie, nombreC, descripcion};
            modeloE.addRow(fila);
        }
        this.tablaE.setModel(modeloE);
    }

    public void cargarTablaC() {
        Object[] columna = {"ID", "Nombre", "Dirección", "Teléfono", "Ingreso"};
        DefaultTableModel modeloC = new DefaultTableModel(columna, 0);
        for (Cuidador c : cuidadores) {
            short id = c.getId();
            String nombre = c.getNombre();
            String direccion = c.getDireccion();
            String telefono = c.getTelefono();
            LocalDateTime fechaI = c.getFechInicioTrabajar();
            Object[] fila = {id, nombre, direccion, telefono, fechaI};
            modeloC.addRow(fila);
        }
        this.tablaC.setModel(modeloC);
    }

    public void cargarTablaH() {
        Object[] columna = {"ID", "Nombre", "Clima", "Vegetación"};
        DefaultTableModel modeloH = new DefaultTableModel(columna, 0);
        for (Habitat h : habitats) {
            short id = h.getId();
            String nombre = h.getNombreHabitat();
            String clima = h.getClima();
            String vegetacion = h.getVegetacion();
            Object[] fila = {id, nombre, clima, vegetacion};
            modeloH.addRow(fila);
        }
        this.tablaH.setModel(modeloH);
    }

    public void cargarTablaZ() {
        Object[] columna = {"ID", "Nombre", "Extensión"};
        DefaultTableModel modeloZ = new DefaultTableModel(columna, 0);
        for (Zona z : zonas) {
            short id = z.getId();
            String nombre = z.getNombreZona();
            float extension = z.getExtension();
            Object[] fila = {id, nombre, extension};
            modeloZ.addRow(fila);
        }
        this.tablaZ.setModel(modeloZ);
    }

    /**
     * Creates new form frmEspecieR
     */
    public frmEspecie() {
        initComponents();
        rsscalelabel.RSScaleLabel.setScaleLabel(jLabel5, "src/iconos/logo.jpg");
        setLocationRelativeTo(null);
        cargarTablaE();
        cargarTablaC();
        cargarTablaH();
        cargarTablaZ();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        bGuardarT = new javax.swing.JButton();
        bOrdenarT = new javax.swing.JButton();
        bEliminarT = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        rAscendenteT = new javax.swing.JRadioButton();
        rDescendenteT = new javax.swing.JRadioButton();
        cBoxT = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        tablaPanel = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaH = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaZ = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaC = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaE = new javax.swing.JTable();
        bActualizar = new javax.swing.JButton();
        bEliminar = new javax.swing.JButton();
        bGuardar = new javax.swing.JButton();
        rDescendente = new javax.swing.JRadioButton();
        jEspecie = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        rAscendente = new javax.swing.JRadioButton();
        bOrdenar = new javax.swing.JButton();
        jNombreC = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jMarca = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cBox = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane5 = new javax.swing.JScrollPane();
        jDescripcion = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));

        bGuardarT.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bGuardarT.setText("Guardar");
        bGuardarT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarTActionPerformed(evt);
            }
        });

        bOrdenarT.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bOrdenarT.setText("Ordenar");
        bOrdenarT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOrdenarTActionPerformed(evt);
            }
        });

        bEliminarT.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bEliminarT.setText("Eliminar");
        bEliminarT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEliminarTActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jButton1.setText("Ver Todo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        buttonGroup2.add(rAscendenteT);
        rAscendenteT.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        rAscendenteT.setText("Ascendente");

        buttonGroup2.add(rDescendenteT);
        rDescendenteT.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        rDescendenteT.setText("Descendente");

        cBoxT.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        cBoxT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "ID" }));

        jButton3.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jButton3.setText("Ver todas las relaciones");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        tablaPanel.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N

        tablaH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tablaH);

        tablaPanel.addTab("Habitats", jScrollPane3);

        tablaZ.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(tablaZ);

        tablaPanel.addTab("Zonas", jScrollPane4);

        tablaC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tablaC);

        tablaPanel.addTab("Cuidadores", jScrollPane2);

        tablaE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaE);

        bActualizar.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bActualizar.setText("Actualizar");
        bActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bActualizarActionPerformed(evt);
            }
        });

        bEliminar.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bEliminar.setText("Eliminar");
        bEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEliminarActionPerformed(evt);
            }
        });

        bGuardar.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bGuardar.setText("Guardar");
        bGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarActionPerformed(evt);
            }
        });

        buttonGroup1.add(rDescendente);
        rDescendente.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        rDescendente.setText("Descendente");

        jEspecie.setBackground(new java.awt.Color(0, 102, 153));
        jEspecie.setForeground(new java.awt.Color(255, 255, 255));
        jEspecie.setBorder(null);

        jLabel1.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jLabel1.setText("Especie:");

        buttonGroup1.add(rAscendente);
        rAscendente.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        rAscendente.setText("Ascendente");

        bOrdenar.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bOrdenar.setText("Ordenar");
        bOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOrdenarActionPerformed(evt);
            }
        });

        jNombreC.setBackground(new java.awt.Color(0, 102, 153));
        jNombreC.setForeground(new java.awt.Color(255, 255, 255));
        jNombreC.setBorder(null);

        jLabel2.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jLabel2.setText("Nombre Científico:");

        jMarca.setBackground(new java.awt.Color(0, 102, 153));
        jMarca.setForeground(new java.awt.Color(255, 255, 255));
        jMarca.setBorder(null);

        jLabel3.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jLabel3.setText("Marca (N°):");

        jLabel4.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jLabel4.setText("Descripción:");

        cBox.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        cBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Especie", "Marca" }));

        jButton2.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jButton2.setText("Menu Principal");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("jLabel5");

        jDescripcion.setColumns(20);
        jDescripcion.setRows(5);
        jScrollPane5.setViewportView(jDescripcion);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(bOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rAscendente)
                        .addGap(18, 18, 18)
                        .addComponent(rDescendente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 702, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(tablaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(bGuardarT, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(bEliminarT, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(bOrdenarT, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cBoxT, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rAscendenteT)
                                .addGap(33, 33, 33)
                                .addComponent(rDescendenteT)))
                        .addGap(151, 151, 151))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(37, 37, 37)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jNombreC, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cBox, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(149, 149, 149)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(95, 95, 95)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(bGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(45, 45, 45))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(63, 63, 63)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(23, 23, 23)
                                        .addComponent(jNombreC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(25, 25, 25)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bGuardar)
                                    .addComponent(bActualizar)
                                    .addComponent(bEliminar))
                                .addGap(5, 5, 5))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bGuardarT)
                                    .addComponent(bEliminarT)
                                    .addComponent(jButton1))
                                .addGap(34, 34, 34)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bOrdenarT)
                            .addComponent(cBoxT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rAscendenteT)
                            .addComponent(rDescendenteT))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tablaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bOrdenar)
                            .addComponent(rAscendente)
                            .addComponent(rDescendente)
                            .addComponent(cBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new frmMenuPrincipal().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void bEliminarTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminarTActionPerformed
        // TODO add your handling code here:
        if (tablaE.getSelectedRow() > -1 & tablaC.getSelectedRow() > -1 & bandera) {
            Especie especieN = especies.get(tablaE.getSelectedRow());
            Cuidador cuidadorV = cuidadores.get(tablaC.getSelectedRow());
            if (especieN.getCuiadores().contains(cuidadorV)) {
                especieN.eliminarCuidador(cuidadorV);
                cuidadorV.eliminarEspecie(especieN);
                try {
                    System.out.println(etrs.actulizar(especieN));
                    System.out.println(ctrs.actulizar(cuidadorV));
                    JOptionPane.showMessageDialog(null, cuidadorV.getNombre() + " dejó de cuidar a: "
                            + especieN.getNombreEspecie(), "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (MyExcepcion ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                    cuidadores = especieN.getCuiadores();
                    cargarTablaC();
                }
            } else {
                JOptionPane.showMessageDialog(null, "El cuidador que intenta eliminar de " + especieN.getNombreEspecie()
                        + " no se encutra asociado a la lista de la especie.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (tablaE.getSelectedRow() > -1 & tablaH.getSelectedRow() > -1 & bandera) {
            Especie especieN = especies.get(tablaE.getSelectedRow());
            Habitat habitatN = habitats.get(tablaH.getSelectedRow());
            if (especieN.getHabitats().contains(habitatN)) {
                especieN.elimninarHabitat(habitatN);
                habitatN.eliminarEspecie(especieN);
                try {
                    etrs.actulizar(especieN);
                    htrs.actulizar(habitatN);
                    JOptionPane.showMessageDialog(null, especieN.getNombreEspecie() + " dejó de vivir en "
                            + habitatN.getNombreHabitat(), "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (MyExcepcion ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                    habitats = especieN.getHabitats();
                    cargarTablaH();
                }
            } else {
                JOptionPane.showMessageDialog(null, "El Habitat que intenta eliminar de " + especieN.getNombreEspecie()
                        + " no se encutra asociado a la lista de la especie.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (tablaE.getSelectedRow() > -1 & tablaZ.getSelectedRow() > -1 & bandera) {
            Especie especieN = especies.get(tablaE.getSelectedRow());
            Zona zonaN = zonas.get(tablaZ.getSelectedRow());
            if (especieN.getZonas().contains(zonaN)) {
                especieN.eliminarZona(zonaN);
                zonaN.eliminarEspecie(especieN);
                try {
                    etrs.actulizar(especieN);
                    ztrs.actulizar(zonaN);
                    System.out.println(zonaN.getEspecies().size());
                    JOptionPane.showMessageDialog(null, especieN.getNombreEspecie() + " dejó de vivir en "
                            + zonaN.getNombreZona(), "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (MyExcepcion ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                    zonas = especieN.getZonas();
                    cargarTablaZ();
                }
            } else {
                JOptionPane.showMessageDialog(null, "La zona que intenta eliminar de " + especieN.getNombreEspecie()
                        + " no se encutra asociado a la lista de la especie.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (!bandera) {
            JOptionPane.showMessageDialog(null, "Solo puede eliminar las relaciones con la especie accediendo a sus "
                    + "respectivas asociaciones", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una fila de la especie a realizar"
                    + " la asociación y una fila de la tabla a asociar el elemento.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_bEliminarTActionPerformed

    private void bGuardarTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarTActionPerformed
        // TODO add your handling code here:
        if (tablaE.getSelectedRow() > -1 & tablaC.getSelectedRow() > -1 & !bandera) {
            Especie especieN = especies.get(tablaE.getSelectedRow());
            Cuidador cuidadorN = cuidadores.get(tablaC.getSelectedRow());
            if (!especieN.getCuiadores().contains(cuidadorN)) {
                especieN.agregarCuidador(cuidadorN);
                cuidadorN.cuidarNuevaEspecie(especieN);
                try {
                    System.out.println(etrs.actulizar(especieN));
                    System.out.println(ctrs.actulizar(cuidadorN));
                    JOptionPane.showMessageDialog(null, "Cuidador agregado a " + especieN.getNombreEspecie(), "Aviso",
                            JOptionPane.INFORMATION_MESSAGE);
                } catch (MyExcepcion ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "El cuidador que intenta agregar a " + especieN.getNombreEspecie()
                        + " ya está agregado a la lista asociada a la especie.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (tablaE.getSelectedRow() > -1 & tablaH.getSelectedRow() > -1 & !bandera) {
            Especie especieN = especies.get(tablaE.getSelectedRow());
            Habitat habitatN = habitats.get(tablaH.getSelectedRow());
            if (!especieN.getHabitats().contains(habitatN)) {
                especieN.agregarHabitat(habitatN);
                habitatN.agregarEspecie(especieN);
                try {
                    etrs.actulizar(especieN);
                    htrs.actulizar(habitatN);
                    JOptionPane.showMessageDialog(null, "Habitat agregado a " + especieN.getNombreEspecie(), "Aviso",
                            JOptionPane.INFORMATION_MESSAGE);
                } catch (MyExcepcion ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "El Habitat que intenta agregar a " + especieN.getNombreEspecie()
                        + " ya está agregado a la lista asociada a la especie.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (tablaE.getSelectedRow() > -1 & tablaZ.getSelectedRow() > -1 & !bandera) {
            Especie especieN = especies.get(tablaE.getSelectedRow());
            Zona zonaN = zonas.get(tablaZ.getSelectedRow());
            if (!especieN.getZonas().contains(zonaN)) {
                especieN.agregarZona(zonaN);
                zonaN.agregarEspecie(especieN);
                try {
                    etrs.actulizar(especieN);
                    ztrs.actulizar(zonaN);
                    JOptionPane.showMessageDialog(null, "Zona agregado a " + especieN.getNombreEspecie(), "Aviso",
                            JOptionPane.INFORMATION_MESSAGE);
                } catch (MyExcepcion ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "La Zona que intenta agregar a " + especieN.getNombreEspecie()
                        + " ya está agregado a la lista asociada a la especie.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else if (bandera) {
            JOptionPane.showMessageDialog(null, "Solo puede agregar relaciones entre especie accediendo a la lista completa",
                    "Error al Aregar", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una fila de la especie a realizar"
                    + " la asociación y una fila de la tabla a asociar el elemento.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_bGuardarTActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (tablaE.getSelectedRow() > -1) {
            cuidadores = especies.get(tablaE.getSelectedRow()).getCuiadores();
            habitats = especies.get(tablaE.getSelectedRow()).getHabitats();
            zonas = especies.get(tablaE.getSelectedRow()).getZonas();
            cargarTablaC();
            cargarTablaH();
            cargarTablaZ();
            bandera = true;
        } else {
            JOptionPane.showMessageDialog(null, "Elija la fila que quiere ver sus relaciones",
                    "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void bGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarActionPerformed
        // TODO add your handling code here:
        if ((jEspecie.getText().isEmpty() | jDescripcion.getText().isEmpty()
                | jNombreC.getText().isEmpty() | jMarca.getText().isEmpty())) {
            JOptionPane.showMessageDialog(null, "Todos los campos de especie deben de estar llenos", "Error al guardar",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                etrs.guardar(new Especie(jEspecie.getText(), jNombreC.getText(), jDescripcion.getText(),
                        Short.parseShort(jMarca.getText())));
                jEspecie.setText("");
                jDescripcion.setText("");
                jNombreC.setText("");
            } catch (NumberFormatException n) {
                JOptionPane.showMessageDialog(null, "Por favor ingrese número enteros para los campos cuantitativos",
                        "Error en la capa 8", JOptionPane.INFORMATION_MESSAGE);
            } catch (MyExcepcion ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error al Guardar", JOptionPane.ERROR_MESSAGE);
            } finally {
                jMarca.setText("");
                cargarTablaE();
            }
        }
    }//GEN-LAST:event_bGuardarActionPerformed

    private void bOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOrdenarActionPerformed
        // TODO add your handling code here:
        if (cBox.getSelectedIndex() == 0) {
            Especie.bandera = false; //Cambia la forma de ordenar los objetos Especie (Nombre)
            if (rAscendente.isSelected()) {
                Collections.sort(especies);
            } else if (rDescendente.isSelected()) {
                Collections.sort(especies, Collections.reverseOrder());
            }
        } else if (cBox.getSelectedIndex() == 1) {
            Especie.bandera = true; //Cambia la forma de ordenar los objetos Especie (Marca)
            if (rAscendente.isSelected()) {
                Collections.sort(especies, Collections.reverseOrder());
            } else if (rDescendente.isSelected()) {
                Collections.sort(especies);
            }
        }
        cargarTablaE();
    }//GEN-LAST:event_bOrdenarActionPerformed

    private void bActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bActualizarActionPerformed
        // TODO add your handling code here:
        if (tablaE.getSelectedRow() > -1 & !(jEspecie.getText().isEmpty() | jDescripcion.getText().isEmpty()
                | jNombreC.getText().isEmpty())) {
            JOptionPane.showMessageDialog(null, "Solo la Marca no se puede actualizar",
                    "Aviso", JOptionPane.INFORMATION_MESSAGE);
            Especie especieV = especies.get(tablaE.getSelectedRow());
            try {
                etrs.actulizar(new Especie(jEspecie.getText(), jEspecie.getText(),
                        jDescripcion.getText(), especieV.getMarca()));
            } catch (MyExcepcion ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error al actualizar",
                        JOptionPane.ERROR_MESSAGE);
            } finally {
                jNombreC.setText("");
                jDescripcion.setText("");
                jEspecie.setText("");
                jMarca.setText("");
                cargarTablaE();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor seleccione la fila a actualizar "
                    + "(Tener en cuenta que la marca no pude actualizarse)", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bActualizarActionPerformed

    /**
     * Método que permite ordenar una lista dentro de un jTable ya sea por
     * nombre o identificador
     *
     * @param evt
     */
    private void bOrdenarTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOrdenarTActionPerformed
        // TODO add your handling code here:
        if (cBoxT.getSelectedIndex() == 0) {
            Cuidador.bandera = false;
            Habitat.bandera = false;
            Zona.bandera = false;
            if (rAscendenteT.isSelected()) {
                Collections.sort(zonas);
                Collections.sort(cuidadores);
                Collections.sort(habitats);
            } else if (rDescendenteT.isSelected()) {
                Collections.sort(cuidadores, Collections.reverseOrder());
                Collections.sort(zonas, Collections.reverseOrder());
                Collections.sort(habitats, Collections.reverseOrder());
            }
        } else if (cBoxT.getSelectedIndex() == 1) {
            //El cambio de bandera indica a la clase como va a ser ejecutado el compareTo
            Cuidador.bandera = true;
            Habitat.bandera = true;
            Zona.bandera = true;
            if (rAscendenteT.isSelected()) {
                Collections.sort(cuidadores, Collections.reverseOrder());
                Collections.sort(zonas, Collections.reverseOrder());
                Collections.sort(habitats, Collections.reverseOrder());
            } else if (rDescendenteT.isSelected()) {
                Collections.sort(zonas);
                Collections.sort(cuidadores);
                Collections.sort(habitats);
            }
        }
        cargarTablaC();
        cargarTablaH();
        cargarTablaZ();
    }//GEN-LAST:event_bOrdenarTActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        bandera = false;
        cuidadores = ctrs.listar();
        habitats = htrs.listar();
        zonas = ztrs.listar();
        cargarTablaC();
        cargarTablaH();
        cargarTablaZ();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void bEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminarActionPerformed
        // TODO add your handling code here:
        if (tablaE.getSelectedRow() > -1) {
            try {
                UtilGestion.eliminacionCompleta(especies.get(tablaE.getSelectedRow()));
                System.out.println(etrs.eliminar(especies.get(tablaE.getSelectedRow())));
            } catch (MyExcepcion ex) {
                Logger.getLogger(frmEspecie.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                cuidadores = ctrs.listar();
                habitats = htrs.listar();
                zonas = ztrs.listar();
                cargarTablaE();
                cargarTablaC();
                cargarTablaH();
                cargarTablaZ();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una fila a eliminar", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bEliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmEspecie.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmEspecie.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmEspecie.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmEspecie.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmEspecie().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bActualizar;
    private javax.swing.JButton bEliminar;
    private javax.swing.JButton bEliminarT;
    private javax.swing.JButton bGuardar;
    private javax.swing.JButton bGuardarT;
    private javax.swing.JButton bOrdenar;
    private javax.swing.JButton bOrdenarT;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> cBox;
    private javax.swing.JComboBox<String> cBoxT;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JTextArea jDescripcion;
    private javax.swing.JTextField jEspecie;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jMarca;
    private javax.swing.JTextField jNombreC;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JRadioButton rAscendente;
    private javax.swing.JRadioButton rAscendenteT;
    private javax.swing.JRadioButton rDescendente;
    private javax.swing.JRadioButton rDescendenteT;
    private javax.swing.JTable tablaC;
    private javax.swing.JTable tablaE;
    private javax.swing.JTable tablaH;
    private javax.swing.JTabbedPane tablaPanel;
    private javax.swing.JTable tablaZ;
    // End of variables declaration//GEN-END:variables
}
