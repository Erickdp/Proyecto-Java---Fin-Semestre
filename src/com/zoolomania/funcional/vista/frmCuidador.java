/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zoolomania.funcional.vista;

import com.zoolomania.funcional.control.CuidadorTrs;
import com.zoolomania.funcional.control.EspecieTrs;
import com.zoolomania.funcional.control.MyExcepcion;
import com.zoolomania.funcional.control.UtilGestion;
import com.zoolomania.funcional.modelo.Cuidador;
import com.zoolomania.funcional.modelo.Empleado;
import com.zoolomania.funcional.modelo.Especie;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Clase que permitirá simular el formulario para realizar operaciones
 * de negocio con Cuidador
 * @author Erick Díaz
 */
public class frmCuidador extends javax.swing.JFrame {

    CuidadorTrs ctrs = new CuidadorTrs();
    EspecieTrs etrs = new EspecieTrs();
    List<Cuidador> cuidadores = ctrs.listar();
    List<Especie> especies = etrs.listar();
    Cuidador cuidadorEliminar;
    Especie especieEliminar;
    boolean bandera = false;

    public void cargarTablaC() {
        Object[] columna = {"ID", "Nombre", "Dirección", "Teléfono", "Ingreso"};
        DefaultTableModel modeloC = new DefaultTableModel(columna, 0);
        for (Cuidador c : cuidadores) {
            short id = c.getId();
            String nombre = c.getNombre();
            String direccion = c.getDireccion();
            String telefono = c.getTelefono();
            LocalDateTime ingreso = c.getFechInicioTrabajar();
            Object[] fila = {id, nombre, direccion, telefono, ingreso};
            modeloC.addRow(fila);
        }
        this.tablaC.setModel(modeloC);
    }

    public void cargarTablaE() {
        Object[] columna = {"Marca", "Especie", "Nombre Científico", "Descripción"};
        DefaultTableModel modeloE = new DefaultTableModel(columna, 0);
        for (Especie e : especies) {
            short marca = e.getMarca();
            String especie = e.getNombreEspecie();
            String nombreC = e.getNombreCientifico();
            String descripcion = e.getDescripcion();
            Object[] fila = {marca, especie, nombreC, descripcion};
            modeloE.addRow(fila);
        }
        this.tablaE.setModel(modeloE);
    }

    public void cargarTablaEC() {
        Object[] columna = {"Marca", "Especie", "Nombre Científico", "Fecha De Cuidado",};
        DefaultTableModel modeloEC = new DefaultTableModel(columna, 0);
        for (Especie e : especies) {
            short id = e.getMarca();
            String especie = e.getNombreEspecie();
            String nC = e.getNombreCientifico();
            LocalDate fecha = e.getFechaCuidado();
            Object[] fila = {id, especie, nC, fecha};
            modeloEC.addRow(fila);
        }
        this.tablaE.setModel(modeloEC);
    }

    /**
     * Creates new form frmCuidadorU
     */
    public frmCuidador() {
        initComponents();
        rsscalelabel.RSScaleLabel.setScaleLabel(jLabel5, "src/iconos/logo.jpg");
        setLocationRelativeTo(null);
        cargarTablaC();
        cargarTablaE();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        bAgregarE = new javax.swing.JButton();
        bEliminarE = new javax.swing.JButton();
        bVerEspecies = new javax.swing.JButton();
        bOrdenar1 = new javax.swing.JButton();
        comboE = new javax.swing.JComboBox<>();
        rAscendenteE = new javax.swing.JRadioButton();
        rDescendenteE = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaE = new javax.swing.JTable();
        bMenu = new javax.swing.JButton();
        jDireccionC = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jIdC = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaC = new javax.swing.JTable();
        bEspecie = new javax.swing.JButton();
        bActualizar = new javax.swing.JButton();
        bEliminar = new javax.swing.JButton();
        bAgregar = new javax.swing.JButton();
        rDescendente = new javax.swing.JRadioButton();
        rAscendente = new javax.swing.JRadioButton();
        comboC = new javax.swing.JComboBox<>();
        bOrdenar = new javax.swing.JButton();
        jNombreC = new javax.swing.JTextField();
        jTelefonoC = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 153, 255));
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));

        bAgregarE.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bAgregarE.setText("Agregar ");
        bAgregarE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarEActionPerformed(evt);
            }
        });

        bEliminarE.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bEliminarE.setText("Eliminar ");
        bEliminarE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEliminarEActionPerformed(evt);
            }
        });

        bVerEspecies.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bVerEspecies.setText("Ver Especie(s)");
        bVerEspecies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVerEspeciesActionPerformed(evt);
            }
        });

        bOrdenar1.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bOrdenar1.setText("Ordenar ");
        bOrdenar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOrdenar1ActionPerformed(evt);
            }
        });

        comboE.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        comboE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "ID" }));

        rAscendenteE.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        rAscendenteE.setSelected(true);
        rAscendenteE.setText("Ascendente");

        rDescendenteE.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        rDescendenteE.setText("Descendente");

        tablaE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tablaE);

        bMenu.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bMenu.setText("Menu Principal");
        bMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMenuActionPerformed(evt);
            }
        });

        jDireccionC.setBackground(new java.awt.Color(0, 102, 153));
        jDireccionC.setForeground(new java.awt.Color(255, 255, 255));
        jDireccionC.setBorder(null);

        jLabel2.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jLabel2.setText("Dirección:");

        jIdC.setBackground(new java.awt.Color(0, 102, 153));
        jIdC.setForeground(new java.awt.Color(255, 255, 255));
        jIdC.setBorder(null);

        jLabel4.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jLabel4.setText("ID:");

        tablaC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaC);

        bEspecie.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bEspecie.setText("Ver Especie(s) cuidada(s)");
        bEspecie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEspecieActionPerformed(evt);
            }
        });

        bActualizar.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bActualizar.setText("Actualizar ");
        bActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bActualizarActionPerformed(evt);
            }
        });

        bEliminar.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bEliminar.setText("Eliminar ");
        bEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEliminarActionPerformed(evt);
            }
        });

        bAgregar.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bAgregar.setText("Agregar ");
        bAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarActionPerformed(evt);
            }
        });

        rDescendente.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        rDescendente.setText("Descendente");

        rAscendente.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        rAscendente.setSelected(true);
        rAscendente.setText("Ascendente");

        comboC.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        comboC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "ID" }));

        bOrdenar.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        bOrdenar.setText("Ordenar ");
        bOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOrdenarActionPerformed(evt);
            }
        });

        jNombreC.setBackground(new java.awt.Color(0, 102, 153));
        jNombreC.setForeground(new java.awt.Color(255, 255, 255));
        jNombreC.setBorder(null);

        jTelefonoC.setBackground(new java.awt.Color(0, 102, 153));
        jTelefonoC.setForeground(new java.awt.Color(255, 255, 255));
        jTelefonoC.setBorder(null);

        jLabel1.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jLabel1.setText("Nombre:");

        jLabel3.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jLabel3.setText("Teléfono:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(bAgregar)
                                .addGap(139, 139, 139)
                                .addComponent(bEliminar))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jNombreC, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(32, 32, 32)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel2))))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jDireccionC, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(bActualizar)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(bOrdenar)
                                        .addGap(20, 20, 20)
                                        .addComponent(rAscendente)))
                                .addGap(18, 18, 18)
                                .addComponent(rDescendente)
                                .addGap(18, 18, 18)
                                .addComponent(comboC, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(110, 110, 110)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTelefonoC, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(345, 345, 345)
                                        .addComponent(bEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jIdC, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(130, 130, 130)))
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bVerEspecies, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(563, 563, 563))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 756, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bOrdenar1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboE, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rDescendenteE)
                            .addComponent(bAgregarE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bEliminarE)
                            .addComponent(rAscendenteE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addComponent(bVerEspecies))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(bMenu)
                                        .addGap(113, 113, 113)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(bAgregarE)
                                            .addComponent(bEliminarE))))))
                        .addGap(18, 18, 18)
                        .addComponent(rAscendenteE)
                        .addGap(0, 4, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jNombreC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDireccionC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTelefonoC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jIdC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bEspecie, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(bAgregar)
                                .addComponent(bActualizar)
                                .addComponent(bEliminar)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bOrdenar)
                            .addComponent(rAscendente)
                            .addComponent(rDescendente)
                            .addComponent(comboC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bOrdenar1)
                            .addComponent(comboE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rDescendenteE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1358, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOrdenarActionPerformed
        // TODO add your handling code here:
        if (comboC.getSelectedIndex() == 0) {
            Empleado.bandera = false;
            if (rAscendente.isSelected()) {
                Collections.sort(cuidadores);
            } else if (rDescendente.isSelected()) {
                Collections.sort(cuidadores, Collections.reverseOrder());
            }
        } else if (comboC.getSelectedIndex() == 1) {
            Cuidador.bandera = true;
            if (rAscendente.isSelected()) {
                Collections.sort(cuidadores, Collections.reverseOrder());
            } else if (rDescendente.isSelected()) {
                Collections.sort(cuidadores);
            }
        }
        cargarTablaC();
    }//GEN-LAST:event_bOrdenarActionPerformed

    private void bAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarActionPerformed
        // TODO add your handling code here:
        if ((jNombreC.getText().isEmpty() | jTelefonoC.getText().isEmpty()
                | jDireccionC.getText().isEmpty() | jIdC.getText().isEmpty())) {
            JOptionPane.showMessageDialog(null, "Exiten campos sin llenar, revise de nuevo", "Registro Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                System.out.println(ctrs.guardar(new Cuidador(jNombreC.getText(), jDireccionC.getText(),
                        jTelefonoC.getText(), Short.parseShort(jIdC.getText()))));
                jNombreC.setText("");
                jDireccionC.setText("");
                jTelefonoC.setText("");
            } catch (NumberFormatException n) {
                JOptionPane.showMessageDialog(null, "Por favor ingrese números enteros para los campos cuantitativos.",
                        "Error en la capa 8", JOptionPane.INFORMATION_MESSAGE);
            } catch (MyExcepcion ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error al Guardar", JOptionPane.ERROR_MESSAGE);
            } finally {
                jIdC.setText("");
                cargarTablaC();
            }
        }
    }//GEN-LAST:event_bAgregarActionPerformed

    private void bEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminarActionPerformed
        // TODO add your handling code here:
        if (tablaC.getSelectedRow() > -1) {
            try {
                UtilGestion.eliminacionCompleta(cuidadores.get(tablaC.getSelectedRow()));
                ctrs.eliminar(cuidadores.get(tablaC.getSelectedRow()));
            } catch (MyExcepcion ex) {
                Logger.getLogger(frmCuidador.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                especies = etrs.listar();
                cargarTablaC();
                cargarTablaE();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una fila",
                    "Error al mostrar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bEliminarActionPerformed

    private void bActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bActualizarActionPerformed
        // TODO add your handling code here:
        if (tablaC.getSelectedRow() > -1 & !(jNombreC.getText().isEmpty() | jTelefonoC.getText().isEmpty()
                | jDireccionC.getText().isEmpty())) {
            JOptionPane.showMessageDialog(null, "El ID no se actualiza.",
                    "Aviso", JOptionPane.INFORMATION_MESSAGE);
            Cuidador cuidador = cuidadores.get(tablaC.getSelectedRow());
            try {
                System.out.println(ctrs.actulizar(new Cuidador(jNombreC.getText(),
                        jDireccionC.getText(), jTelefonoC.getText(), cuidador.getId())));
                jNombreC.setText("");
                jDireccionC.setText("");
                jTelefonoC.setText("");
                jIdC.setText("");
            } catch (MyExcepcion ex) {
                Logger.getLogger(frmCuidador.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                cargarTablaC();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una fila o los campos están vacíos",
                    "Error al mostrar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bActualizarActionPerformed

    private void bEspecieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEspecieActionPerformed
        // TODO add your handling code here:
        if (tablaC.getSelectedRow() > -1) {
            especies = cuidadores.get(tablaC.getSelectedRow()).getEspecies();
            cargarTablaEC();
            bandera = true;
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una "
                    + "fila", "Error al mostrar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bEspecieActionPerformed

    private void bMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMenuActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new frmMenuPrincipal().setVisible(true);
    }//GEN-LAST:event_bMenuActionPerformed

    private void bOrdenar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOrdenar1ActionPerformed
        // TODO add your handling code here:
        if (tablaC.getSelectedRow() > -1) {
            if (comboE.getSelectedIndex() == 0) {
                Especie.bandera = false;
                if (rAscendenteE.isSelected()) {
                    Collections.sort(especies);
                } else if (rDescendenteE.isSelected()) {
                    Collections.sort(especies, Collections.reverseOrder());
                }
            } else if (comboE.getSelectedIndex() == 1) {
                Especie.bandera = true;
                if (rAscendenteE.isSelected()) {
                    Collections.sort(especies, Collections.reverseOrder());
                } else if (rDescendenteE.isSelected()) {
                    Collections.sort(especies);
                }
            }
            cargarTablaE();
        }
    }//GEN-LAST:event_bOrdenar1ActionPerformed

    private void bVerEspeciesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVerEspeciesActionPerformed
        // TODO add your handling code here:
        especies = etrs.listar();
        bandera = false;
        cargarTablaE();
    }//GEN-LAST:event_bVerEspeciesActionPerformed

    private void bEliminarEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminarEActionPerformed
        // TODO add your handling code here:
        if (tablaC.getSelectedRow() > -1 & tablaE.getSelectedRow() > -1 & bandera) {
            Cuidador cuidador = cuidadores.get(tablaC.getSelectedRow());
            Especie especie = cuidador.getEspecies().get(tablaE.getSelectedRow());
            if (cuidador.getEspecies().contains(especie)) {
                cuidador.eliminarEspecie(especie);
                especie.eliminarCuidador(cuidador);
                try {
                    ctrs.actulizar(cuidador);
                    etrs.actulizar(especie);
                    JOptionPane.showMessageDialog(null, cuidador.getNombre() + " dejó de cuidar a "
                            + especie.getNombreEspecie(), "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (MyExcepcion ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                    cargarTablaE();
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se pude eliminar la Especie " + especie.getNombreEspecie()
                        + " pues no es cuidada por " + cuidador.getNombre(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una fila", "Error al eliminar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bEliminarEActionPerformed

    private void bAgregarEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarEActionPerformed
        // TODO add your handling code here
        if (tablaC.getSelectedRow() > -1 & tablaE.getSelectedRow() > -1 & !bandera) {
            Cuidador cuidador = cuidadores.get(tablaC.getSelectedRow());
            Especie especie = especies.get(tablaE.getSelectedRow());
            if (!cuidador.getEspecies().contains(especie)) {
                cuidador.cuidarNuevaEspecie(especie);
                especie.agregarCuidador(cuidador);
                especie.setFechaCuidado(LocalDate.now());
                try {
                    ctrs.actulizar(cuidador);
                    etrs.actulizar(especie);
                    JOptionPane.showMessageDialog(null, cuidador.getNombre() + " empezó a cuidar a "
                            + especie.getNombreEspecie(), "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (MyExcepcion ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                    cargarTablaE();
                }
            } else {
                JOptionPane.showMessageDialog(null, "La Especie que intenta agregar a " + cuidador.getNombre()
                        + " ya está agregado a la lista asociada al Cuidador.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una fila debe de agregar desde "
                    + "la ventana general de especies", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bAgregarEActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmCuidador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmCuidador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmCuidador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmCuidador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmCuidador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bActualizar;
    private javax.swing.JButton bAgregar;
    private javax.swing.JButton bAgregarE;
    private javax.swing.JButton bEliminar;
    private javax.swing.JButton bEliminarE;
    private javax.swing.JButton bEspecie;
    private javax.swing.JButton bMenu;
    private javax.swing.JButton bOrdenar;
    private javax.swing.JButton bOrdenar1;
    private javax.swing.JButton bVerEspecies;
    private javax.swing.JComboBox<String> comboC;
    private javax.swing.JComboBox<String> comboE;
    private javax.swing.JTextField jDireccionC;
    private javax.swing.JTextField jIdC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jNombreC;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextField jTelefonoC;
    private javax.swing.JRadioButton rAscendente;
    private javax.swing.JRadioButton rAscendenteE;
    private javax.swing.JRadioButton rDescendente;
    private javax.swing.JRadioButton rDescendenteE;
    private javax.swing.JTable tablaC;
    private javax.swing.JTable tablaE;
    // End of variables declaration//GEN-END:variables
}
