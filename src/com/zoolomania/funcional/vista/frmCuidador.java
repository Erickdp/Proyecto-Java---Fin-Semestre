/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zoolomania.funcional.vista;

import com.zoolomania.funcional.control.CuidadorTrs;
import com.zoolomania.funcional.control.EspecieTrs;
import com.zoolomania.funcional.control.MyExcepcion;
import com.zoolomania.funcional.control.UtilGestion;
import com.zoolomania.funcional.modelo.Cuidador;
import com.zoolomania.funcional.modelo.Empleado;
import com.zoolomania.funcional.modelo.Especie;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Erick Díaz
 */
public class frmCuidador extends javax.swing.JFrame {

    CuidadorTrs ctrs = new CuidadorTrs();
    EspecieTrs etrs = new EspecieTrs();
    List<Cuidador> cuidadores = (List<Cuidador>) ctrs.listar();
    List<Especie> especies = (List<Especie>) etrs.listar();
    Cuidador cuidadorEliminar;
    Especie especieEliminar;
    boolean bandera = false;

    public void cargarTablaC() {
        Object[] columna = {"ID", "Nombre", "Dirección", "Teléfono", "Ingreso"};
        DefaultTableModel modeloC = new DefaultTableModel(columna, 0);
        for (Cuidador c : cuidadores) {
            short id = c.getId();
            String nombre = c.getNombre();
            String direccion = c.getDireccion();
            String telefono = c.getTelefono();
            LocalDateTime ingreso = c.getFechInicioTrabajar();
            Object[] fila = {id, nombre, direccion, telefono, ingreso};
            modeloC.addRow(fila);
        }
        this.tablaC.setModel(modeloC);
    }

    public void cargarTablaE() {
        Object[] columna = {"Marca", "Especie", "Nombre Científico", "Fecha de Cuidado", "Descripción"};
        DefaultTableModel modeloE = new DefaultTableModel(columna, 0);
        for (Especie e : especies) {
            short marca = e.getMarca();
            String especie = e.getNombreEspecie();
            String nombreC = e.getNombreCientifico();
            LocalDateTime fechaC = e.getFechaRegistrada();
            String descripcion = e.getDescripcion();
            Object[] fila = {marca, especie, nombreC, fechaC, descripcion};
            modeloE.addRow(fila);
        }
        this.tablaE.setModel(modeloE);
    }

    /**
     * Creates new form frmCuidadorU
     */
    public frmCuidador() {
        initComponents();
        setLocationRelativeTo(null);
        cargarTablaC();
        cargarTablaE();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jNombreC = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jDireccionC = new javax.swing.JTextField();
        jIdC = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        bAgregar = new javax.swing.JButton();
        bEliminar = new javax.swing.JButton();
        bActualizar = new javax.swing.JButton();
        bEspecie = new javax.swing.JButton();
        rDescendente = new javax.swing.JRadioButton();
        rAscendente = new javax.swing.JRadioButton();
        comboC = new javax.swing.JComboBox<>();
        bOrdenar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaC = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaE = new javax.swing.JTable();
        bOrdenar1 = new javax.swing.JButton();
        comboE = new javax.swing.JComboBox<>();
        rAscendenteE = new javax.swing.JRadioButton();
        rDescendenteE = new javax.swing.JRadioButton();
        bVerEspecies = new javax.swing.JButton();
        bEliminarE = new javax.swing.JButton();
        bAgregarE = new javax.swing.JButton();
        jTelefonoC = new javax.swing.JTextField();
        bMenu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nombre");

        jNombreC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNombreCActionPerformed(evt);
            }
        });

        jLabel2.setText("Dirección");

        jLabel4.setText("ID");

        jLabel3.setText("Teléfono");

        bAgregar.setText("Agregar ");
        bAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarActionPerformed(evt);
            }
        });

        bEliminar.setText("Eliminar ");
        bEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEliminarActionPerformed(evt);
            }
        });

        bActualizar.setText("Actualizar ");
        bActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bActualizarActionPerformed(evt);
            }
        });

        bEspecie.setText("Ver Especie(s) cuidada(s)");
        bEspecie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEspecieActionPerformed(evt);
            }
        });

        rDescendente.setText("Descendente");

        rAscendente.setSelected(true);
        rAscendente.setText("Ascendente");

        comboC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "ID" }));

        bOrdenar.setText("Ordenar ");
        bOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOrdenarActionPerformed(evt);
            }
        });

        tablaC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaC);

        tablaE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tablaE);

        bOrdenar1.setText("Ordenar ");
        bOrdenar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOrdenar1ActionPerformed(evt);
            }
        });

        comboE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "ID" }));

        rAscendenteE.setSelected(true);
        rAscendenteE.setText("Ascendente");

        rDescendenteE.setText("Descendente");

        bVerEspecies.setText("Ver Especie(s)");
        bVerEspecies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVerEspeciesActionPerformed(evt);
            }
        });

        bEliminarE.setText("Eliminar ");
        bEliminarE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEliminarEActionPerformed(evt);
            }
        });

        bAgregarE.setText("Agregar ");
        bAgregarE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarEActionPerformed(evt);
            }
        });

        bMenu.setText("Menu Principal");
        bMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jTelefonoC, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(568, 568, 568)
                        .addComponent(bMenu)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(bAgregar)
                                    .addGap(18, 18, 18)
                                    .addComponent(bEliminar))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(bOrdenar)
                                    .addGap(18, 18, 18)
                                    .addComponent(comboC, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(bActualizar)
                                    .addGap(18, 18, 18)
                                    .addComponent(bEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(rAscendente)
                                    .addGap(18, 18, 18)
                                    .addComponent(rDescendente)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bOrdenar1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(comboE, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(rAscendenteE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rDescendenteE)
                                    .addGap(51, 51, 51))))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jNombreC, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(25, 25, 25)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jDireccionC, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jIdC, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(307, 307, 307)
                                    .addComponent(bAgregarE)
                                    .addGap(54, 54, 54)
                                    .addComponent(bEliminarE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                                    .addComponent(bVerEspecies, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(65, 65, 65)))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(bMenu)
                .addGap(38, 38, 38)
                .addComponent(jTelefonoC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(71, 71, 71)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jNombreC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jDireccionC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jIdC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(35, 35, 35)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(bAgregar)
                                .addComponent(bEliminar)
                                .addComponent(bActualizar)
                                .addComponent(bEspecie))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(bOrdenar)
                                .addComponent(comboC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rAscendente)
                                .addComponent(rDescendente)
                                .addComponent(rDescendenteE)
                                .addComponent(rAscendenteE)
                                .addComponent(comboE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(bOrdenar1))
                            .addGap(245, 245, 245))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(55, 55, 55)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(bAgregarE)
                                .addComponent(bEliminarE)
                                .addComponent(bVerEspecies))
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jNombreCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNombreCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jNombreCActionPerformed

    private void bAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarActionPerformed
        // TODO add your handling code here:
        if (validarCampos()) {
            JOptionPane.showMessageDialog(null, "Exiten campos sin llenar, revise de nuevo", "Registro Denegado", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                System.out.println(ctrs.guardar(new Cuidador(jNombreC.getText(), jDireccionC.getText(),
                        jTelefonoC.getText(), Short.parseShort(jIdC.getText()))));
                jNombreC.setText("");
                jDireccionC.setText("");
                jTelefonoC.setText("");
            } catch (MyExcepcion ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error al Guardar", JOptionPane.ERROR_MESSAGE);
            } finally {
                jIdC.setText("");
                cargarTablaC();
            }
        }
    }//GEN-LAST:event_bAgregarActionPerformed

    private void bEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminarActionPerformed
        // TODO add your handling code here:
        if (tablaC.getSelectedRow() > -1) {
            try {
                UtilGestion.eliminacionCompleta(cuidadores.get(tablaC.getSelectedRow()));
                ctrs.eliminar(cuidadores.get(tablaC.getSelectedRow()));
            } catch (MyExcepcion ex) {
                Logger.getLogger(frmCuidador.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                especies = (List<Especie>) etrs.listar();
                cargarTablaC();
                cargarTablaE();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una fila",
                    "Error al mostrar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bEliminarActionPerformed

    private void bActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bActualizarActionPerformed
        // TODO add your handling code here:
        if (tablaC.getSelectedRow() > -1 & !validarCampos()) {
            JOptionPane.showMessageDialog(null, "El ID no se actualiza.",
                    "Aviso", JOptionPane.INFORMATION_MESSAGE);
            Cuidador cuidador = cuidadores.get(tablaC.getSelectedRow());
            try {
                System.out.println(ctrs.actulizar(new Cuidador(jNombreC.getText(),
                        jDireccionC.getText(), jTelefonoC.getText(), cuidador.getId())));
                jNombreC.setText("");
                jDireccionC.setText("");
                jTelefonoC.setText("");
                jIdC.setText("");
            } catch (MyExcepcion ex) {
                Logger.getLogger(frmCuidador.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                cargarTablaC();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una fila o los campos están vacíos",
                    "Error al mostrar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bActualizarActionPerformed

    private void bEspecieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEspecieActionPerformed
        // TODO add your handling code here:
        if (tablaC.getSelectedRow() > -1) {
            especies = cuidadores.get(tablaC.getEditingRow()).getEspecies();
            cargarTablaE();
            bandera = true;
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una "
                    + "fila", "Error al mostrar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bEspecieActionPerformed

    private void bOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOrdenarActionPerformed
        // TODO add your handling code here:
        if (comboC.getSelectedIndex() == 0) {
            Empleado.bandera = false;
            if (rAscendente.isSelected()) {
                Collections.sort(cuidadores);
            } else if (rDescendente.isSelected()) {
                Collections.sort(cuidadores, Collections.reverseOrder());
            }
        } else if (comboC.getSelectedIndex() == 1) {
            Cuidador.bandera = true;
            if (rAscendente.isSelected()) {
                Collections.sort(cuidadores, Collections.reverseOrder());
            } else if (rDescendente.isSelected()) {
                Collections.sort(cuidadores);
            }
        }
        cargarTablaC();
    }//GEN-LAST:event_bOrdenarActionPerformed

    private void bOrdenar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOrdenar1ActionPerformed
        // TODO add your handling code here:
        if (tablaC.getSelectedRow() > -1) {
            if (comboE.getSelectedIndex() == 0) {
                Especie.bandera = false;
                if (rAscendenteE.isSelected()) {
                    Collections.sort(especies);
                } else if (rDescendenteE.isSelected()) {
                    Collections.sort(especies, Collections.reverseOrder());
                }
            } else if (comboE.getSelectedIndex() == 1) {
                Especie.bandera = true;
                if (rAscendenteE.isSelected()) {
                    Collections.sort(especies, Collections.reverseOrder());
                } else if (rDescendenteE.isSelected()) {
                    Collections.sort(especies);
                }
            }
            cargarTablaE();
        }
    }//GEN-LAST:event_bOrdenar1ActionPerformed

    private void bVerEspeciesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVerEspeciesActionPerformed
        // TODO add your handling code here:
        especies = (List<Especie>) etrs.listar();
        bandera = false;
        cargarTablaE();
    }//GEN-LAST:event_bVerEspeciesActionPerformed

    private void bEliminarEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEliminarEActionPerformed
        // TODO add your handling code here:
        if (tablaC.getSelectedRow() > -1 & tablaE.getSelectedRow() > -1 & bandera) {
            Cuidador cuidador = cuidadores.get(tablaC.getSelectedRow());
            Especie especie = cuidador.getEspecies().get(tablaE.getSelectedRow());
            System.out.println(especie.getNombreEspecie());
            if (frmEspecie.buscarObjeto((byte) 1, especie, cuidador)) {
                cuidador.eliminarEspecie(especie);
                especie.eliminarCuidador(cuidador);
                try {
                    System.out.println(ctrs.actulizar(cuidador));
                    System.out.println(etrs.actulizar(especie));
                    especies = cuidador.getEspecies();
                    for (Especie e : especies) {
                        System.out.println(e);
                    }
                    JOptionPane.showMessageDialog(null, cuidador.getNombre() + " dejó de cuidar a "
                            + especie.getNombreEspecie(), "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (MyExcepcion ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                    cargarTablaE();
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se pude eliminar la Especie " + especie.getNombreEspecie()
                        + " pues no es cuidada por " + cuidador.getNombre(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una fila", "Error al eliminar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bEliminarEActionPerformed

    private void bAgregarEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarEActionPerformed
        // TODO add your handling code here
        if (tablaC.getSelectedRow() > -1 & tablaE.getSelectedRow() > -1 & !bandera) {
            Cuidador cuidador = cuidadores.get(tablaC.getSelectedRow());
            Especie especie = especies.get(tablaE.getSelectedRow());
            if (!frmEspecie.buscarObjeto((byte) 1, especie, cuidador)) {
                cuidador.cuidarNuevaEspecie(especie);
                especie.agregarCuidador(cuidador);
                especie.setFechaRegistrada(LocalDateTime.of(LocalDate.now(), LocalTime.now()));
                try {
                    ctrs.actulizar(cuidador);
                    etrs.actulizar(especie);
                    JOptionPane.showMessageDialog(null, cuidador.getNombre() + " empezó a cuidar a "
                            + especie.getNombreEspecie(), "Aviso", JOptionPane.INFORMATION_MESSAGE);
                } catch (MyExcepcion ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                    cargarTablaE();
                }
            } else {
                JOptionPane.showMessageDialog(null, "La Especie que intenta agregar a " + cuidador.getNombre()
                        + " ya está agregado a la lista asociada al Cuidador.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe de seleccionar una fila debe de agregar desde "
                    + "la ventana general de especies", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bAgregarEActionPerformed

    private void bMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMenuActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new frmMenuPrincipal().setVisible(true);
    }//GEN-LAST:event_bMenuActionPerformed

    public boolean validarCampos() {
        if (jNombreC.getText().isEmpty() | jTelefonoC.getText().isEmpty()
                | jDireccionC.getText().isEmpty() | jIdC.getText().isEmpty()) {
            return true;
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmCuidador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmCuidador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmCuidador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmCuidador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmCuidador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bActualizar;
    private javax.swing.JButton bAgregar;
    private javax.swing.JButton bAgregarE;
    private javax.swing.JButton bEliminar;
    private javax.swing.JButton bEliminarE;
    private javax.swing.JButton bEspecie;
    private javax.swing.JButton bMenu;
    private javax.swing.JButton bOrdenar;
    private javax.swing.JButton bOrdenar1;
    private javax.swing.JButton bVerEspecies;
    private javax.swing.JComboBox<String> comboC;
    private javax.swing.JComboBox<String> comboE;
    private javax.swing.JTextField jDireccionC;
    private javax.swing.JTextField jIdC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jNombreC;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTelefonoC;
    private javax.swing.JRadioButton rAscendente;
    private javax.swing.JRadioButton rAscendenteE;
    private javax.swing.JRadioButton rDescendente;
    private javax.swing.JRadioButton rDescendenteE;
    private javax.swing.JTable tablaC;
    private javax.swing.JTable tablaE;
    // End of variables declaration//GEN-END:variables
}
